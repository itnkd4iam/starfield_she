#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Nov 30, 2023 02:36:49 PM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import tkinter.scrolledtext as scrolledtext
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import starfield_she_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black'
_tabfg2 = 'black'
_tabbg1 = 'grey75'
_tabbg2 = 'grey89'
_bgmode = 'light'

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.map('TNotebook.Tab', background =
            [('selected', _bgcolor), ('active', _tabbg1),
            ('!active', _ana2color)], foreground =
            [('selected', _fgcolor), ('active', _tabfg1), ('!active',  _tabfg2)] )
    _style_code_ran = 1


PROGRAM_TITLE = "STARFIELD Shopping Helper BETA"


# S|MainWindow()
class MainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.withdraw()

        top.iconbitmap("res/myIcon.ico")

        top.geometry("600x630")

        top.minsize(400, 630)
        top.resizable(1, 1)
        top.title(PROGRAM_TITLE)
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        top.attributes('-topmost',True)

        self._isMinimized = False

        self.top = top
        self.combobox = tk.StringVar()
        self.Perk_OutpostEngineering4 = tk.IntVar()

        self.BannerImage = tk.PhotoImage(file='./res/banner2.png')
        # self.Banner = tk.Button(self.top, image=self.BannerImage )
        self.Banner = tk.Label(self.top, image=self.BannerImage )
        self.Banner.place(relx=0.0, rely=0.0, height=50, relwidth=1 )
        self.Banner.configure(background="black")
        self.Banner.configure(compound='center')
        self.Banner.configure(disabledforeground="#a3a3a3")
        self.Banner.configure(foreground="white")
        self.Banner.configure(highlightbackground="#d9d9d9")
        self.Banner.configure(highlightcolor="black")
        self.Banner.configure(pady="0")
        self.Banner.configure(relief="flat")
        self.Banner.configure(text=PROGRAM_TITLE)
        self.Banner.configure(font='Arial 16 bold')
        _style_code()

        self.SaveList = ttk.Combobox(self.top)
        self.SaveList.place(x=20, y=60, height=30
                , width=200)
        self.SaveList.configure(textvariable=self.combobox)
        self.SaveList.configure(takefocus="")
        # self.SaveList.current(0)
        self.SaveList.configure(state='readonly')

        self.SaveListBtn = tk.Button(self.top)
        self.SaveListBtn.place(x=230, y=60, height=24, width=27)
        self.SaveListBtn.configure(activebackground="beige")
        self.SaveListBtn.configure(activeforeground="black")
        self.SaveListBtn.configure(background="#d9d9d9")
        self.SaveListBtn.configure(compound='left')
        self.SaveListBtn.configure(disabledforeground="#a3a3a3")
        self.SaveListBtn.configure(foreground="#000000")
        self.SaveListBtn.configure(highlightbackground="#d9d9d9")
        self.SaveListBtn.configure(highlightcolor="black")
        self.SaveListBtn.configure(pady="0")
        self.SaveListBtn.configure(text='''💾''')                # Save Disk Icon

        self.DelListBtn = tk.Button(self.top)
        self.DelListBtn.place(x=296, y=60, height=24, width=27)
        self.DelListBtn.configure(activebackground="beige")
        self.DelListBtn.configure(activeforeground="black")
        self.DelListBtn.configure(background="#d9d9d9")
        self.DelListBtn.configure(compound='left')
        self.DelListBtn.configure(disabledforeground="#a3a3a3")
        self.DelListBtn.configure(foreground="#000000")
        self.DelListBtn.configure(highlightbackground="#d9d9d9")
        self.DelListBtn.configure(highlightcolor="black")
        self.DelListBtn.configure(pady="0")
        self.DelListBtn.configure(text='''🗑''')                # Trash icon

        self.NewListBtn = tk.Button(self.top)
        self.NewListBtn.place(x=263, y=60, height=24, width=27)
        self.NewListBtn.configure(activebackground="beige")
        self.NewListBtn.configure(activeforeground="black")
        self.NewListBtn.configure(background="#d9d9d9")
        self.NewListBtn.configure(compound='left')
        self.NewListBtn.configure(disabledforeground="#a3a3a3")
        self.NewListBtn.configure(foreground="#000000")
        self.NewListBtn.configure(highlightbackground="#d9d9d9")
        self.NewListBtn.configure(highlightcolor="black")
        self.NewListBtn.configure(pady="0")
        self.NewListBtn.configure(text='''+''')

        self.TNotebook1 = ttk.Notebook(self.top)
        self.TNotebook1.place(x=20, y=120, relheight=1, height=-180
                , relwidth=1, width=-40)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text='''My Shopping List''', compound="left"
                ,underline='''-1'''  )
        self.TNotebook1_t1.configure(background="#d9d9d9")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")

        """
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(1, text='''Page 2''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t2.configure(background="#d9d9d9")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")
        """

        self.TPanedwindow1 = ttk.Panedwindow(self.TNotebook1_t1
                , orient="vertical")
        self.TPanedwindow1.place(relx=0.018, rely=0.024, relheight=0.962
                , relwidth=0.964)
        self.TPanedwindow1_p1 = ttk.Labelframe(self.TPanedwindow1, height=200
                , text=' Selected Items: ')
        self.TPanedwindow1.add(self.TPanedwindow1_p1, weight=0)

        self.TPanedwindow1_p2 = ttk.Labelframe(self.TPanedwindow1, text=' Resources check list: ')
        self.TPanedwindow1.add(self.TPanedwindow1_p2, weight=0)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        """
        self.Text1 = scrolledtext.ScrolledText(self.TPanedwindow1_p2, name='materialslist')
        self.Text1.place(x=10, y=20, relheight=1
                , relwidth=1, width=-20, height=-30, bordermode='ignore')
        self.Text1.configure(background="white")
        self.Text1.configure(font= ("Courier", 12) )
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(wrap="word")
        self.Text1.configure(state=DISABLED)
        """

        # S|resource check list frame
        self.ChecklistFrame = tk.Frame( self.TPanedwindow1_p2, name='materialslist')
        self.ChecklistFrame.place(x=10, y=20, relheight=1
                , relwidth=1, width=-20, height=-30, bordermode='ignore')
        self.ChecklistFrame.configure(background="black")

        self.Canvas = tk.Canvas(self.ChecklistFrame )
        self.Canvas.grid(row=0, column=0, sticky='news')

        self.clVerticalBar = tk.Scrollbar(self.ChecklistFrame, orient='vertical', command=self.Canvas.yview)
        self.clVerticalBar.grid(row=0, column=1, sticky='ns')
        self.Canvas.configure(yscrollcommand=self.clVerticalBar.set)

        # inner frame for widgets
        self.CheckList = tk.Frame(self.Canvas, name='checklist' )
        self.InnerWindow = self.Canvas.create_window((0, 0), window=self.CheckList, anchor='nw')

        self.ChecklistFrame.columnconfigure(0, weight=1)
        self.ChecklistFrame.rowconfigure(0, weight=1)

        self.CheckList.columnconfigure(1, weight=1)

        self.CheckList.bind('<Configure>', self.resize)
        self.Canvas.bind('<Configure>', self.frame_width)

        self.ChecklistFrame.bind('<Enter>', lambda e: _bound_to_mousewheel(e, self.ChecklistFrame))
        self.ChecklistFrame.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, self.ChecklistFrame))
        # E|resource check list frame


        self.ConsoleCmdBtn = tk.Button(self.top)
        self.ConsoleCmdBtn.place(relx=0.5, rely=1, y=-10, height=34, width=180, anchor='s')
        self.ConsoleCmdBtn.configure(activebackground="beige")
        self.ConsoleCmdBtn.configure(activeforeground="black")
        self.ConsoleCmdBtn.configure(background="#d9d9d9")
        self.ConsoleCmdBtn.configure(compound='left')
        self.ConsoleCmdBtn.configure(disabledforeground="#a3a3a3")
        self.ConsoleCmdBtn.configure(foreground="#000000")
        self.ConsoleCmdBtn.configure(highlightbackground="#d9d9d9")
        self.ConsoleCmdBtn.configure(highlightcolor="black")
        self.ConsoleCmdBtn.configure(pady="0")
        self.ConsoleCmdBtn.configure(text='📋 Console Commands')

        self.AboutBtn = tk.Button(self.top)
        # self.AboutBtn.place(relx=1, x=-20, rely=1, y=-10, height=34, width=47, anchor='se')
        self.AboutBtn.place(relx=1, x=-20, rely=1, y=-10, height=34, width=34, anchor='se')
        self.AboutBtn.configure(activebackground="beige")
        self.AboutBtn.configure(activeforeground="black")
        self.AboutBtn.configure(background="#d9d9d9")
        self.AboutBtn.configure(compound='left')
        self.AboutBtn.configure(disabledforeground="#a3a3a3")
        self.AboutBtn.configure(foreground="#000000")
        self.AboutBtn.configure(highlightbackground="#d9d9d9")
        self.AboutBtn.configure(highlightcolor="black")
        self.AboutBtn.configure(pady="0")
        # self.AboutBtn.configure(text='''Tip me!''')
        self.AboutBtn.configure(text='''?''')

        self.SaveButton = tk.Button(self.top)
        # self.SaveButton.place(relx=1, x=-75, rely=1, y=-10, height=34, width=34, anchor='se')
        self.SaveButton.place(relx=1, x=-62, rely=1, y=-10, height=34, width=34, anchor='se')
        self.SaveButton.configure(activebackground="beige")
        self.SaveButton.configure(activeforeground="black")
        self.SaveButton.configure(background="#d9d9d9")
        self.SaveButton.configure(compound='left')
        self.SaveButton.configure(disabledforeground="#a3a3a3")
        self.SaveButton.configure(foreground="#000000")
        self.SaveButton.configure(highlightbackground="#d9d9d9")
        self.SaveButton.configure(highlightcolor="black")
        self.SaveButton.configure(pady="0")
        self.SaveButton.configure(text='💾', font=('', 12) )        # disk symbol
        self.SaveButton_tooltip = \
        ToolTip(self.SaveButton, 'Export content to disk')

        """
        # for implementation... or not...

        self.PerkButton = tk.Checkbutton(self.top)
        self.PerkButton.place(relx=0.667, y=60, height=24
                , relwidth=0.318)
        self.PerkButton.configure(activebackground="beige")
        self.PerkButton.configure(activeforeground="black")
        self.PerkButton.configure(anchor='e')
        self.PerkButton.configure(background="#d9d9d9")
        self.PerkButton.configure(compound='left')
        self.PerkButton.configure(disabledforeground="#a3a3a3")
        self.PerkButton.configure(foreground="#000000")
        self.PerkButton.configure(highlightbackground="#d9d9d9")
        self.PerkButton.configure(highlightcolor="black")
        self.PerkButton.configure(justify='left')
        self.PerkButton.configure(selectcolor="#d9d9d9")
        self.PerkButton.configure(text='''(Perk) Outpost Engineering 4/4''')
        self.PerkButton.configure(variable=self.Perk_OutpostEngineering4)
        self.PerkButton_tooltip = \
        ToolTip(self.PerkButton, '''Outpost modules now cost 50% fewer resources to build.''')
        """

        self.PrevButton = tk.Button(self.top)
        self.PrevButton.place(relx=1, x=-50, y=110, height=24, width=24, anchor='se')
        self.PrevButton.configure(activebackground="beige")
        self.PrevButton.configure(activeforeground="black")
        self.PrevButton.configure(background="#d9d9d9")
        self.PrevButton.configure(compound='left')
        self.PrevButton.configure(disabledforeground="#a3a3a3")
        self.PrevButton.configure(foreground="#000000")
        self.PrevButton.configure(highlightbackground="#d9d9d9")
        self.PrevButton.configure(highlightcolor="black")
        self.PrevButton.configure(pady="0")
        self.PrevButton.configure(text='''⏴''')            # previous tab
        self.NextButton = tk.Button(self.top)
        self.NextButton.place(relx=1, x=-20, y=110, height=24, width=24, anchor='se')
        self.NextButton.configure(activebackground="beige")
        self.NextButton.configure(activeforeground="black")
        self.NextButton.configure(background="#d9d9d9")
        self.NextButton.configure(compound='left')
        self.NextButton.configure(disabledforeground="#a3a3a3")
        self.NextButton.configure(foreground="#000000")
        self.NextButton.configure(highlightbackground="#d9d9d9")
        self.NextButton.configure(highlightcolor="black")
        self.NextButton.configure(pady="0")
        self.NextButton.configure(text='''⏵''')            # next tab

        self.ClearButton = tk.Button(self.top)
        self.ClearButton.place(x=20, rely=1, y=-10, height=34, width=87, anchor='sw')
        self.ClearButton.configure(activebackground="beige")
        self.ClearButton.configure(activeforeground="black")
        self.ClearButton.configure(background="#d9d9d9")
        self.ClearButton.configure(compound='left')
        self.ClearButton.configure(disabledforeground="#a3a3a3")
        self.ClearButton.configure(foreground="#000000")
        self.ClearButton.configure(highlightbackground="#d9d9d9")
        self.ClearButton.configure(highlightcolor="black")
        self.ClearButton.configure(pady="0")
        self.ClearButton.configure(text='''Clear Items''')

        """
        mystyle = ttk.Style()
        mystyle.configure('C.TSizegrip', background=_bgcolor)

        self.TSizegrip1 = ttk.Sizegrip(self.top, style='C.TSizegrip' )      # if bgcolor ignored, it has something to do with theme_use()
        self.TSizegrip1.place(anchor='se', relx=1.0, rely=1.0)
        """

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [200, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

    def frame_width(self, event):
        # resize inner frame to canvas size
        canvas_width = event.width
        self.Canvas.itemconfig(self.InnerWindow, width = canvas_width)

    def resize(self, event=None):
        self.Canvas.configure(scrollregion=self.Canvas.bbox('all'))



from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.attributes('-topmost',True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def remove_tooltip(event=None):
        self.wdgt.unbind('<Enter>', self.spawn )        # error w/ self
        self.wdgt.unbind('<Leave>', self.hide )
        self.wdgt.unbind('<Motion>', self.move )
        self.msg.destroy()
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip


# E|MainWindow()

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


def start_up():
    starfield_she_support.main()

if __name__ == '__main__':
    starfield_she_support.main()




